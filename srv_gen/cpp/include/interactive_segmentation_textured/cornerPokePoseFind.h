/* Auto-generated by genmsg_cpp for file /home/hao/groovy_ws/myws/bosch-ros-pkg-code/stacks/bosch_interactive_segmentation/interactive_segmentation_textured/srv/cornerPokePoseFind.srv */
#ifndef INTERACTIVE_SEGMENTATION_TEXTURED_SERVICE_CORNERPOKEPOSEFIND_H
#define INTERACTIVE_SEGMENTATION_TEXTURED_SERVICE_CORNERPOKEPOSEFIND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "std_msgs/Header.h"
#include "geometry_msgs/Pose.h"
#include "geometry_msgs/Pose.h"

namespace interactive_segmentation_textured
{
template <class ContainerAllocator>
struct cornerPokePoseFindRequest_ {
  typedef cornerPokePoseFindRequest_<ContainerAllocator> Type;

  cornerPokePoseFindRequest_()
  {
  }

  cornerPokePoseFindRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::interactive_segmentation_textured::cornerPokePoseFindRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interactive_segmentation_textured::cornerPokePoseFindRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct cornerPokePoseFindRequest
typedef  ::interactive_segmentation_textured::cornerPokePoseFindRequest_<std::allocator<void> > cornerPokePoseFindRequest;

typedef boost::shared_ptr< ::interactive_segmentation_textured::cornerPokePoseFindRequest> cornerPokePoseFindRequestPtr;
typedef boost::shared_ptr< ::interactive_segmentation_textured::cornerPokePoseFindRequest const> cornerPokePoseFindRequestConstPtr;



template <class ContainerAllocator>
struct cornerPokePoseFindResponse_ {
  typedef cornerPokePoseFindResponse_<ContainerAllocator> Type;

  cornerPokePoseFindResponse_()
  : header()
  , corner_poses()
  , corner_poses_convex()
  {
  }

  cornerPokePoseFindResponse_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , corner_poses(_alloc)
  , corner_poses_convex(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _corner_poses_type;
  std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  corner_poses;

  typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _corner_poses_convex_type;
  std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  corner_poses_convex;


  typedef boost::shared_ptr< ::interactive_segmentation_textured::cornerPokePoseFindResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interactive_segmentation_textured::cornerPokePoseFindResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct cornerPokePoseFindResponse
typedef  ::interactive_segmentation_textured::cornerPokePoseFindResponse_<std::allocator<void> > cornerPokePoseFindResponse;

typedef boost::shared_ptr< ::interactive_segmentation_textured::cornerPokePoseFindResponse> cornerPokePoseFindResponsePtr;
typedef boost::shared_ptr< ::interactive_segmentation_textured::cornerPokePoseFindResponse const> cornerPokePoseFindResponseConstPtr;


struct cornerPokePoseFind
{

typedef cornerPokePoseFindRequest Request;
typedef cornerPokePoseFindResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct cornerPokePoseFind
} // namespace interactive_segmentation_textured

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::interactive_segmentation_textured::cornerPokePoseFindRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::interactive_segmentation_textured::cornerPokePoseFindRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::interactive_segmentation_textured::cornerPokePoseFindRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::interactive_segmentation_textured::cornerPokePoseFindRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::interactive_segmentation_textured::cornerPokePoseFindRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "interactive_segmentation_textured/cornerPokePoseFindRequest";
  }

  static const char* value(const  ::interactive_segmentation_textured::cornerPokePoseFindRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::interactive_segmentation_textured::cornerPokePoseFindRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::interactive_segmentation_textured::cornerPokePoseFindRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::interactive_segmentation_textured::cornerPokePoseFindRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::interactive_segmentation_textured::cornerPokePoseFindResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::interactive_segmentation_textured::cornerPokePoseFindResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::interactive_segmentation_textured::cornerPokePoseFindResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ec2e96cd2342dee4d7f51d1dcb4733b7";
  }

  static const char* value(const  ::interactive_segmentation_textured::cornerPokePoseFindResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xec2e96cd2342dee4ULL;
  static const uint64_t static_value2 = 0xd7f51d1dcb4733b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::interactive_segmentation_textured::cornerPokePoseFindResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "interactive_segmentation_textured/cornerPokePoseFindResponse";
  }

  static const char* value(const  ::interactive_segmentation_textured::cornerPokePoseFindResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::interactive_segmentation_textured::cornerPokePoseFindResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
geometry_msgs/Pose[] corner_poses\n\
geometry_msgs/Pose[] corner_poses_convex\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::interactive_segmentation_textured::cornerPokePoseFindResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::interactive_segmentation_textured::cornerPokePoseFindResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::interactive_segmentation_textured::cornerPokePoseFindResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::interactive_segmentation_textured::cornerPokePoseFindRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct cornerPokePoseFindRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::interactive_segmentation_textured::cornerPokePoseFindResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.corner_poses);
    stream.next(m.corner_poses_convex);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct cornerPokePoseFindResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<interactive_segmentation_textured::cornerPokePoseFind> {
  static const char* value() 
  {
    return "ec2e96cd2342dee4d7f51d1dcb4733b7";
  }

  static const char* value(const interactive_segmentation_textured::cornerPokePoseFind&) { return value(); } 
};

template<>
struct DataType<interactive_segmentation_textured::cornerPokePoseFind> {
  static const char* value() 
  {
    return "interactive_segmentation_textured/cornerPokePoseFind";
  }

  static const char* value(const interactive_segmentation_textured::cornerPokePoseFind&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<interactive_segmentation_textured::cornerPokePoseFindRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ec2e96cd2342dee4d7f51d1dcb4733b7";
  }

  static const char* value(const interactive_segmentation_textured::cornerPokePoseFindRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<interactive_segmentation_textured::cornerPokePoseFindRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "interactive_segmentation_textured/cornerPokePoseFind";
  }

  static const char* value(const interactive_segmentation_textured::cornerPokePoseFindRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<interactive_segmentation_textured::cornerPokePoseFindResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ec2e96cd2342dee4d7f51d1dcb4733b7";
  }

  static const char* value(const interactive_segmentation_textured::cornerPokePoseFindResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<interactive_segmentation_textured::cornerPokePoseFindResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "interactive_segmentation_textured/cornerPokePoseFind";
  }

  static const char* value(const interactive_segmentation_textured::cornerPokePoseFindResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // INTERACTIVE_SEGMENTATION_TEXTURED_SERVICE_CORNERPOKEPOSEFIND_H

