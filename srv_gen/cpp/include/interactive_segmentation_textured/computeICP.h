/* Auto-generated by genmsg_cpp for file /home/hao/groovy_ws/myws/bosch-ros-pkg-code/stacks/bosch_interactive_segmentation/interactive_segmentation_textured/srv/computeICP.srv */
#ifndef INTERACTIVE_SEGMENTATION_TEXTURED_SERVICE_COMPUTEICP_H
#define INTERACTIVE_SEGMENTATION_TEXTURED_SERVICE_COMPUTEICP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "sensor_msgs/PointCloud2.h"
#include "sensor_msgs/PointCloud2.h"


#include "geometry_msgs/Pose.h"

namespace interactive_segmentation_textured
{
template <class ContainerAllocator>
struct computeICPRequest_ {
  typedef computeICPRequest_<ContainerAllocator> Type;

  computeICPRequest_()
  : input()
  , target()
  {
  }

  computeICPRequest_(const ContainerAllocator& _alloc)
  : input(_alloc)
  , target(_alloc)
  {
  }

  typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _input_type;
   ::sensor_msgs::PointCloud2_<ContainerAllocator>  input;

  typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _target_type;
   ::sensor_msgs::PointCloud2_<ContainerAllocator>  target;


  typedef boost::shared_ptr< ::interactive_segmentation_textured::computeICPRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interactive_segmentation_textured::computeICPRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct computeICPRequest
typedef  ::interactive_segmentation_textured::computeICPRequest_<std::allocator<void> > computeICPRequest;

typedef boost::shared_ptr< ::interactive_segmentation_textured::computeICPRequest> computeICPRequestPtr;
typedef boost::shared_ptr< ::interactive_segmentation_textured::computeICPRequest const> computeICPRequestConstPtr;



template <class ContainerAllocator>
struct computeICPResponse_ {
  typedef computeICPResponse_<ContainerAllocator> Type;

  computeICPResponse_()
  : transform()
  {
  }

  computeICPResponse_(const ContainerAllocator& _alloc)
  : transform(_alloc)
  {
  }

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _transform_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  transform;


  typedef boost::shared_ptr< ::interactive_segmentation_textured::computeICPResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interactive_segmentation_textured::computeICPResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct computeICPResponse
typedef  ::interactive_segmentation_textured::computeICPResponse_<std::allocator<void> > computeICPResponse;

typedef boost::shared_ptr< ::interactive_segmentation_textured::computeICPResponse> computeICPResponsePtr;
typedef boost::shared_ptr< ::interactive_segmentation_textured::computeICPResponse const> computeICPResponseConstPtr;


struct computeICP
{

typedef computeICPRequest Request;
typedef computeICPResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct computeICP
} // namespace interactive_segmentation_textured

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::interactive_segmentation_textured::computeICPRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::interactive_segmentation_textured::computeICPRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::interactive_segmentation_textured::computeICPRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bde9f0d1dd90eb818a6b9512db3750d3";
  }

  static const char* value(const  ::interactive_segmentation_textured::computeICPRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbde9f0d1dd90eb81ULL;
  static const uint64_t static_value2 = 0x8a6b9512db3750d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::interactive_segmentation_textured::computeICPRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "interactive_segmentation_textured/computeICPRequest";
  }

  static const char* value(const  ::interactive_segmentation_textured::computeICPRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::interactive_segmentation_textured::computeICPRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/PointCloud2 input\n\
sensor_msgs/PointCloud2 target\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud2\n\
# This message holds a collection of N-dimensional points, which may\n\
# contain additional information such as normals, intensity, etc. The\n\
# point data is stored as a binary blob, its layout described by the\n\
# contents of the \"fields\" array.\n\
\n\
# The point cloud data may be organized 2d (image-like) or 1d\n\
# (unordered). Point clouds organized as 2d images may be produced by\n\
# camera depth sensors such as stereo or time-of-flight.\n\
\n\
# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n\
# points).\n\
Header header\n\
\n\
# 2D structure of the point cloud. If the cloud is unordered, height is\n\
# 1 and width is the length of the point cloud.\n\
uint32 height\n\
uint32 width\n\
\n\
# Describes the channels and their layout in the binary data blob.\n\
PointField[] fields\n\
\n\
bool    is_bigendian # Is this data bigendian?\n\
uint32  point_step   # Length of a point in bytes\n\
uint32  row_step     # Length of a row in bytes\n\
uint8[] data         # Actual point data, size is (row_step*height)\n\
\n\
bool is_dense        # True if there are no invalid points\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointField\n\
# This message holds the description of one point entry in the\n\
# PointCloud2 message format.\n\
uint8 INT8    = 1\n\
uint8 UINT8   = 2\n\
uint8 INT16   = 3\n\
uint8 UINT16  = 4\n\
uint8 INT32   = 5\n\
uint8 UINT32  = 6\n\
uint8 FLOAT32 = 7\n\
uint8 FLOAT64 = 8\n\
\n\
string name      # Name of field\n\
uint32 offset    # Offset from start of point struct\n\
uint8  datatype  # Datatype enumeration, see above\n\
uint32 count     # How many elements in the field\n\
\n\
";
  }

  static const char* value(const  ::interactive_segmentation_textured::computeICPRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::interactive_segmentation_textured::computeICPResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::interactive_segmentation_textured::computeICPResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::interactive_segmentation_textured::computeICPResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6784139f41d477bc9647bd6bd3fb0294";
  }

  static const char* value(const  ::interactive_segmentation_textured::computeICPResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6784139f41d477bcULL;
  static const uint64_t static_value2 = 0x9647bd6bd3fb0294ULL;
};

template<class ContainerAllocator>
struct DataType< ::interactive_segmentation_textured::computeICPResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "interactive_segmentation_textured/computeICPResponse";
  }

  static const char* value(const  ::interactive_segmentation_textured::computeICPResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::interactive_segmentation_textured::computeICPResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Pose transform\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::interactive_segmentation_textured::computeICPResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::interactive_segmentation_textured::computeICPResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::interactive_segmentation_textured::computeICPRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.input);
    stream.next(m.target);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct computeICPRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::interactive_segmentation_textured::computeICPResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.transform);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct computeICPResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<interactive_segmentation_textured::computeICP> {
  static const char* value() 
  {
    return "5202812facca6cd2d14b2d6bd8203e30";
  }

  static const char* value(const interactive_segmentation_textured::computeICP&) { return value(); } 
};

template<>
struct DataType<interactive_segmentation_textured::computeICP> {
  static const char* value() 
  {
    return "interactive_segmentation_textured/computeICP";
  }

  static const char* value(const interactive_segmentation_textured::computeICP&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<interactive_segmentation_textured::computeICPRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5202812facca6cd2d14b2d6bd8203e30";
  }

  static const char* value(const interactive_segmentation_textured::computeICPRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<interactive_segmentation_textured::computeICPRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "interactive_segmentation_textured/computeICP";
  }

  static const char* value(const interactive_segmentation_textured::computeICPRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<interactive_segmentation_textured::computeICPResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5202812facca6cd2d14b2d6bd8203e30";
  }

  static const char* value(const interactive_segmentation_textured::computeICPResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<interactive_segmentation_textured::computeICPResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "interactive_segmentation_textured/computeICP";
  }

  static const char* value(const interactive_segmentation_textured::computeICPResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // INTERACTIVE_SEGMENTATION_TEXTURED_SERVICE_COMPUTEICP_H

