/* Auto-generated by genmsg_cpp for file /home/hao/groovy_ws/myws/bosch-ros-pkg-code/stacks/bosch_interactive_segmentation/interactive_segmentation_textured_groovy/srv/estimateRigid.srv */
#ifndef INTERACTIVE_SEGMENTATION_TEXTURED_GROOVY_SERVICE_ESTIMATERIGID_H
#define INTERACTIVE_SEGMENTATION_TEXTURED_GROOVY_SERVICE_ESTIMATERIGID_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"



namespace interactive_segmentation_textured_groovy
{
template <class ContainerAllocator>
struct estimateRigidRequest_ {
  typedef estimateRigidRequest_<ContainerAllocator> Type;

  estimateRigidRequest_()
  : features_old()
  , features_new()
  {
  }

  estimateRigidRequest_(const ContainerAllocator& _alloc)
  : features_old(_alloc)
  , features_new(_alloc)
  {
  }

  typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _features_old_type;
  std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  features_old;

  typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _features_new_type;
  std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  features_new;


  typedef boost::shared_ptr< ::interactive_segmentation_textured_groovy::estimateRigidRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interactive_segmentation_textured_groovy::estimateRigidRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct estimateRigidRequest
typedef  ::interactive_segmentation_textured_groovy::estimateRigidRequest_<std::allocator<void> > estimateRigidRequest;

typedef boost::shared_ptr< ::interactive_segmentation_textured_groovy::estimateRigidRequest> estimateRigidRequestPtr;
typedef boost::shared_ptr< ::interactive_segmentation_textured_groovy::estimateRigidRequest const> estimateRigidRequestConstPtr;



template <class ContainerAllocator>
struct estimateRigidResponse_ {
  typedef estimateRigidResponse_<ContainerAllocator> Type;

  estimateRigidResponse_()
  : inliers()
  , success(0)
  {
  }

  estimateRigidResponse_(const ContainerAllocator& _alloc)
  : inliers(_alloc)
  , success(0)
  {
  }

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _inliers_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  inliers;

  typedef int32_t _success_type;
  int32_t success;


  typedef boost::shared_ptr< ::interactive_segmentation_textured_groovy::estimateRigidResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interactive_segmentation_textured_groovy::estimateRigidResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct estimateRigidResponse
typedef  ::interactive_segmentation_textured_groovy::estimateRigidResponse_<std::allocator<void> > estimateRigidResponse;

typedef boost::shared_ptr< ::interactive_segmentation_textured_groovy::estimateRigidResponse> estimateRigidResponsePtr;
typedef boost::shared_ptr< ::interactive_segmentation_textured_groovy::estimateRigidResponse const> estimateRigidResponseConstPtr;


struct estimateRigid
{

typedef estimateRigidRequest Request;
typedef estimateRigidResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct estimateRigid
} // namespace interactive_segmentation_textured_groovy

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::interactive_segmentation_textured_groovy::estimateRigidRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::interactive_segmentation_textured_groovy::estimateRigidRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::interactive_segmentation_textured_groovy::estimateRigidRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eaeb4f6d418a85830ffa122d5a7a9cc8";
  }

  static const char* value(const  ::interactive_segmentation_textured_groovy::estimateRigidRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeaeb4f6d418a8583ULL;
  static const uint64_t static_value2 = 0x0ffa122d5a7a9cc8ULL;
};

template<class ContainerAllocator>
struct DataType< ::interactive_segmentation_textured_groovy::estimateRigidRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "interactive_segmentation_textured_groovy/estimateRigidRequest";
  }

  static const char* value(const  ::interactive_segmentation_textured_groovy::estimateRigidRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::interactive_segmentation_textured_groovy::estimateRigidRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Point[] features_old\n\
geometry_msgs/Point[] features_new\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::interactive_segmentation_textured_groovy::estimateRigidRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::interactive_segmentation_textured_groovy::estimateRigidResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::interactive_segmentation_textured_groovy::estimateRigidResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::interactive_segmentation_textured_groovy::estimateRigidResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f8cc7c148e0090fd4023bed192be4679";
  }

  static const char* value(const  ::interactive_segmentation_textured_groovy::estimateRigidResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf8cc7c148e0090fdULL;
  static const uint64_t static_value2 = 0x4023bed192be4679ULL;
};

template<class ContainerAllocator>
struct DataType< ::interactive_segmentation_textured_groovy::estimateRigidResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "interactive_segmentation_textured_groovy/estimateRigidResponse";
  }

  static const char* value(const  ::interactive_segmentation_textured_groovy::estimateRigidResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::interactive_segmentation_textured_groovy::estimateRigidResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32[] inliers\n\
int32 success\n\
\n\
";
  }

  static const char* value(const  ::interactive_segmentation_textured_groovy::estimateRigidResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::interactive_segmentation_textured_groovy::estimateRigidRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.features_old);
    stream.next(m.features_new);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct estimateRigidRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::interactive_segmentation_textured_groovy::estimateRigidResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.inliers);
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct estimateRigidResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<interactive_segmentation_textured_groovy::estimateRigid> {
  static const char* value() 
  {
    return "536808d5a729d88f5d653c8f3bc1c5db";
  }

  static const char* value(const interactive_segmentation_textured_groovy::estimateRigid&) { return value(); } 
};

template<>
struct DataType<interactive_segmentation_textured_groovy::estimateRigid> {
  static const char* value() 
  {
    return "interactive_segmentation_textured_groovy/estimateRigid";
  }

  static const char* value(const interactive_segmentation_textured_groovy::estimateRigid&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<interactive_segmentation_textured_groovy::estimateRigidRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "536808d5a729d88f5d653c8f3bc1c5db";
  }

  static const char* value(const interactive_segmentation_textured_groovy::estimateRigidRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<interactive_segmentation_textured_groovy::estimateRigidRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "interactive_segmentation_textured_groovy/estimateRigid";
  }

  static const char* value(const interactive_segmentation_textured_groovy::estimateRigidRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<interactive_segmentation_textured_groovy::estimateRigidResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "536808d5a729d88f5d653c8f3bc1c5db";
  }

  static const char* value(const interactive_segmentation_textured_groovy::estimateRigidResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<interactive_segmentation_textured_groovy::estimateRigidResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "interactive_segmentation_textured_groovy/estimateRigid";
  }

  static const char* value(const interactive_segmentation_textured_groovy::estimateRigidResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // INTERACTIVE_SEGMENTATION_TEXTURED_GROOVY_SERVICE_ESTIMATERIGID_H

