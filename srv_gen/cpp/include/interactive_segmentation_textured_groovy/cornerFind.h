/* Auto-generated by genmsg_cpp for file /home/hao/groovy_ws/myws/bosch-ros-pkg-code/stacks/bosch_interactive_segmentation/interactive_segmentation_textured_groovy/srv/cornerFind.srv */
#ifndef INTERACTIVE_SEGMENTATION_TEXTURED_GROOVY_SERVICE_CORNERFIND_H
#define INTERACTIVE_SEGMENTATION_TEXTURED_GROOVY_SERVICE_CORNERFIND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "sensor_msgs/Image.h"


#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point32.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point32.h"

namespace interactive_segmentation_textured_groovy
{
template <class ContainerAllocator>
struct cornerFindRequest_ {
  typedef cornerFindRequest_<ContainerAllocator> Type;

  cornerFindRequest_()
  : image()
  {
  }

  cornerFindRequest_(const ContainerAllocator& _alloc)
  : image(_alloc)
  {
  }

  typedef  ::sensor_msgs::Image_<ContainerAllocator>  _image_type;
   ::sensor_msgs::Image_<ContainerAllocator>  image;


  typedef boost::shared_ptr< ::interactive_segmentation_textured_groovy::cornerFindRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interactive_segmentation_textured_groovy::cornerFindRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct cornerFindRequest
typedef  ::interactive_segmentation_textured_groovy::cornerFindRequest_<std::allocator<void> > cornerFindRequest;

typedef boost::shared_ptr< ::interactive_segmentation_textured_groovy::cornerFindRequest> cornerFindRequestPtr;
typedef boost::shared_ptr< ::interactive_segmentation_textured_groovy::cornerFindRequest const> cornerFindRequestConstPtr;



template <class ContainerAllocator>
struct cornerFindResponse_ {
  typedef cornerFindResponse_<ContainerAllocator> Type;

  cornerFindResponse_()
  : corner()
  , push_direction()
  , corner_convex()
  , push_direction_convex()
  {
  }

  cornerFindResponse_(const ContainerAllocator& _alloc)
  : corner(_alloc)
  , push_direction(_alloc)
  , corner_convex(_alloc)
  , push_direction_convex(_alloc)
  {
  }

  typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _corner_type;
  std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  corner;

  typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _push_direction_type;
  std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  push_direction;

  typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _corner_convex_type;
  std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  corner_convex;

  typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _push_direction_convex_type;
  std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  push_direction_convex;


  typedef boost::shared_ptr< ::interactive_segmentation_textured_groovy::cornerFindResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interactive_segmentation_textured_groovy::cornerFindResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct cornerFindResponse
typedef  ::interactive_segmentation_textured_groovy::cornerFindResponse_<std::allocator<void> > cornerFindResponse;

typedef boost::shared_ptr< ::interactive_segmentation_textured_groovy::cornerFindResponse> cornerFindResponsePtr;
typedef boost::shared_ptr< ::interactive_segmentation_textured_groovy::cornerFindResponse const> cornerFindResponseConstPtr;


struct cornerFind
{

typedef cornerFindRequest Request;
typedef cornerFindResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct cornerFind
} // namespace interactive_segmentation_textured_groovy

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::interactive_segmentation_textured_groovy::cornerFindRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::interactive_segmentation_textured_groovy::cornerFindRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::interactive_segmentation_textured_groovy::cornerFindRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b13d2865c5af2a64e6e30ab1b56e1dd5";
  }

  static const char* value(const  ::interactive_segmentation_textured_groovy::cornerFindRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb13d2865c5af2a64ULL;
  static const uint64_t static_value2 = 0xe6e30ab1b56e1dd5ULL;
};

template<class ContainerAllocator>
struct DataType< ::interactive_segmentation_textured_groovy::cornerFindRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "interactive_segmentation_textured_groovy/cornerFindRequest";
  }

  static const char* value(const  ::interactive_segmentation_textured_groovy::cornerFindRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::interactive_segmentation_textured_groovy::cornerFindRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/Image image\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::interactive_segmentation_textured_groovy::cornerFindRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::interactive_segmentation_textured_groovy::cornerFindResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::interactive_segmentation_textured_groovy::cornerFindResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::interactive_segmentation_textured_groovy::cornerFindResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4b09fc7def371137a597cd91369399bc";
  }

  static const char* value(const  ::interactive_segmentation_textured_groovy::cornerFindResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4b09fc7def371137ULL;
  static const uint64_t static_value2 = 0xa597cd91369399bcULL;
};

template<class ContainerAllocator>
struct DataType< ::interactive_segmentation_textured_groovy::cornerFindResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "interactive_segmentation_textured_groovy/cornerFindResponse";
  }

  static const char* value(const  ::interactive_segmentation_textured_groovy::cornerFindResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::interactive_segmentation_textured_groovy::cornerFindResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Point[] corner\n\
geometry_msgs/Point32[] push_direction\n\
geometry_msgs/Point[] corner_convex\n\
geometry_msgs/Point32[] push_direction_convex\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const  ::interactive_segmentation_textured_groovy::cornerFindResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::interactive_segmentation_textured_groovy::cornerFindRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.image);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct cornerFindRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::interactive_segmentation_textured_groovy::cornerFindResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.corner);
    stream.next(m.push_direction);
    stream.next(m.corner_convex);
    stream.next(m.push_direction_convex);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct cornerFindResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<interactive_segmentation_textured_groovy::cornerFind> {
  static const char* value() 
  {
    return "ac8d58fdb334d1d395d0c60410ea3eb1";
  }

  static const char* value(const interactive_segmentation_textured_groovy::cornerFind&) { return value(); } 
};

template<>
struct DataType<interactive_segmentation_textured_groovy::cornerFind> {
  static const char* value() 
  {
    return "interactive_segmentation_textured_groovy/cornerFind";
  }

  static const char* value(const interactive_segmentation_textured_groovy::cornerFind&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<interactive_segmentation_textured_groovy::cornerFindRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ac8d58fdb334d1d395d0c60410ea3eb1";
  }

  static const char* value(const interactive_segmentation_textured_groovy::cornerFindRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<interactive_segmentation_textured_groovy::cornerFindRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "interactive_segmentation_textured_groovy/cornerFind";
  }

  static const char* value(const interactive_segmentation_textured_groovy::cornerFindRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<interactive_segmentation_textured_groovy::cornerFindResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ac8d58fdb334d1d395d0c60410ea3eb1";
  }

  static const char* value(const interactive_segmentation_textured_groovy::cornerFindResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<interactive_segmentation_textured_groovy::cornerFindResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "interactive_segmentation_textured_groovy/cornerFind";
  }

  static const char* value(const interactive_segmentation_textured_groovy::cornerFindResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // INTERACTIVE_SEGMENTATION_TEXTURED_GROOVY_SERVICE_CORNERFIND_H

