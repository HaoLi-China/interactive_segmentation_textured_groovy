/**
 * Copyright (c) 2011, Robert Bosch LLC
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Robert Bosch LLC nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
  * \author Christian Bersch
  */

#include <ros/ros.h>
#include <opencv/cv.h>
#include <opencv/highgui.h>
#include "cv_bridge/CvBridge.h"
#include "sensor_msgs/Image.h"
#include "sensor_msgs/CameraInfo.h"
#include <interactive_segmentation_textured/depthImage.h>





int main(int argc, char **argv) {
	ros::init(argc, argv, "robot_self_filter_test");

	ros::NodeHandle nh;
	ros::ServiceClient svc = nh.serviceClient<interactive_segmentation_textured::depthImage>("getDepthImage");

	sensor_msgs::CvBridge bridge_mask;


	cvNamedWindow("alpha",1);

	while (nh.ok()){

		interactive_segmentation_textured::depthImage servicecall;
		svc.call(servicecall);

		sensor_msgs::Image mask = servicecall.response.depth_image;

		printf("width %d height %d", mask.width, mask.height);

//		for (int y=0; y<mask.height; ++y){
//			for (int x=0; x< mask.width; ++x){
//				printf("%d ", mask.data[y*mask.width + x]);
//			}
//			printf ("  >>>>endl line %d<<<<<\n", y);
//		}
		sensor_msgs::ImageConstPtr maskptr = boost::make_shared<sensor_msgs::Image>(boost::ref(servicecall.response.depth_image));
//		cv::Ptr<IplImage> iplimagemask = bridge_mask.imgMsgToCv(boost::make_shared<sensor_msgs::Image>(mask), "passthrough");
		IplImage* iplimagemask = bridge_mask.imgMsgToCv(maskptr, "passthrough");

		cvShowImage("alpha", iplimagemask);


		cvWaitKey();





	}


}
